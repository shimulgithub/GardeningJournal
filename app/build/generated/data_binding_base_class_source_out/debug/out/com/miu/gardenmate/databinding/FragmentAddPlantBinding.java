// Generated by view binder compiler. Do not edit!
package com.miu.gardenmate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.miu.gardenmate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAddPlantBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageButton addPlantBackButton;

  @NonNull
  public final Button addPlantBtn;

  @NonNull
  public final TextView appName;

  @NonNull
  public final EditText plantNameField;

  @NonNull
  public final EditText plantTypeField;

  @NonNull
  public final RelativeLayout topBar;

  @NonNull
  public final EditText wateringFrequency;

  private FragmentAddPlantBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageButton addPlantBackButton, @NonNull Button addPlantBtn,
      @NonNull TextView appName, @NonNull EditText plantNameField, @NonNull EditText plantTypeField,
      @NonNull RelativeLayout topBar, @NonNull EditText wateringFrequency) {
    this.rootView = rootView;
    this.addPlantBackButton = addPlantBackButton;
    this.addPlantBtn = addPlantBtn;
    this.appName = appName;
    this.plantNameField = plantNameField;
    this.plantTypeField = plantTypeField;
    this.topBar = topBar;
    this.wateringFrequency = wateringFrequency;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAddPlantBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAddPlantBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_add_plant, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAddPlantBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addPlantBackButton;
      ImageButton addPlantBackButton = ViewBindings.findChildViewById(rootView, id);
      if (addPlantBackButton == null) {
        break missingId;
      }

      id = R.id.addPlantBtn;
      Button addPlantBtn = ViewBindings.findChildViewById(rootView, id);
      if (addPlantBtn == null) {
        break missingId;
      }

      id = R.id.appName;
      TextView appName = ViewBindings.findChildViewById(rootView, id);
      if (appName == null) {
        break missingId;
      }

      id = R.id.plantNameField;
      EditText plantNameField = ViewBindings.findChildViewById(rootView, id);
      if (plantNameField == null) {
        break missingId;
      }

      id = R.id.plantTypeField;
      EditText plantTypeField = ViewBindings.findChildViewById(rootView, id);
      if (plantTypeField == null) {
        break missingId;
      }

      id = R.id.topBar;
      RelativeLayout topBar = ViewBindings.findChildViewById(rootView, id);
      if (topBar == null) {
        break missingId;
      }

      id = R.id.wateringFrequency;
      EditText wateringFrequency = ViewBindings.findChildViewById(rootView, id);
      if (wateringFrequency == null) {
        break missingId;
      }

      return new FragmentAddPlantBinding((ConstraintLayout) rootView, addPlantBackButton,
          addPlantBtn, appName, plantNameField, plantTypeField, topBar, wateringFrequency);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
